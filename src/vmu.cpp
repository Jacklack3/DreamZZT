/* vmu.cpp - Manage the Dreamcast Visual Memory Unit
 * Copyright (c) 2001- 2007 Sam Steele
 *
 * This file is part of DreamZZT.
 *
 * DreamZZT is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * DreamZZT is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */

#include <Tiki/tiki.h>
#include <Tiki/plxcompat.h>
#include <Tiki/gl.h>
#include <Tiki/hid.h>
#include <Tiki/eventcollector.h>
#include <Tiki/tikitime.h>
#include <Tiki/thread.h>
#include <string.h>

using namespace Tiki;
using namespace Tiki::GL;
using namespace Tiki::Hid;
using namespace Tiki::Thread;

#include <dc/vmu_pkg.h>

#include <zlib/zlib.h>
#include "board.h"
#include "vmu.h"

extern board_info_node *currentbrd;
extern world_header world;

const unsigned char icon_data[544] = {
                                         0x08, 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x10, 0x00, 0x11, 0x11,
                                         0x11, 0x11, 0x00, 0x01, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x01, 0x11,
                                         0x11, 0x10, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x01, 0x11,
                                         0x11, 0x10, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x01, 0x11,
                                         0x11, 0x10, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x10, 0x00, 0x11, 0x11,
                                         0x11, 0x11, 0x00, 0x01, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x10, 0x00, 0x11, 0x11,
                                         0x11, 0x11, 0x00, 0x01, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x10, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x10, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x10, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x01, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x11, 0x11, 0x11, 0x11, 0x11,
                                         0x11, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

                                     };

void unvmuify(const char *filename_in, const char *filename_out) {
	int fd;
	uint8 *buf1;
	uint8 *buf2;
	unsigned long sourceLen,destLen;
	vmu_hdr_t pkg;
	dzzt_vmu_hdr hdr;
	fd=fs_open(filename_in,O_RDONLY);
	fs_read(fd,&pkg,sizeof(vmu_hdr_t));
	fs_seek(fd,128 + (pkg.icon_cnt * 512), SEEK_SET);
	fs_read(fd,&hdr,sizeof(dzzt_vmu_hdr));
	destLen = hdr.datalen;
	sourceLen = pkg.data_len - sizeof(dzzt_vmu_hdr);
	printf("sourceLen: %li\ndestLen: %li\n",sourceLen,destLen);
	buf1 = (uint8 *)malloc(sourceLen);
	buf2 = (uint8 *)malloc(destLen);
	fs_read(fd,buf1,sourceLen);
	fs_close(fd);
	if(uncompress(buf2, &destLen, buf1, sourceLen) != Z_OK) {
		printf("Decompression error!\n");
		free(buf1);
		free(buf2);
		return;
	}
	printf("Writing output file\n");
	fd=fs_open(filename_out,O_WRONLY);
	fs_write(fd,buf2,destLen);
	fs_close(fd);
	printf("Done\n");
}

void vmuify(const char *filename_in, const char *filename_out, const char *shortname, const char *longname) {
	int fd,pkg_size;
	uint8 *buf1;
	uint8 *buf2;
	uint8 *pkg_out;
	vmu_pkg_t pkg;
	dzzt_vmu_hdr hdr;
	unsigned long sourceLen,destLen;

	printf("Opening source file: %s\n",filename_in);
	fd=fs_open(filename_in,O_RDONLY);
	buf1=(uint8 *)malloc(fs_total(fd));
	sourceLen = fs_read(fd,buf1,fs_total(fd));
	printf("Read %i bytes\n",sourceLen);
	buf1[sourceLen]='\0';
	fs_close(fd);
	printf("Closing source file\n");
	hdr.datalen = sourceLen;
	strcpy(hdr.world,(const char *)world.title.c_str());
	strcpy(hdr.board,(const char *)currentbrd->title);
	hdr.time = time(NULL);
	hdr.score = world.score;
	hdr.health = world.health;
	hdr.ammo = world.ammo;
	hdr.gems = world.gems;
	destLen = 20+(int)((float)sourceLen * 1.2f) + sizeof(dzzt_vmu_hdr);
	buf2=(uint8 *)malloc(destLen);
	memcpy(buf2,&hdr,sizeof(dzzt_vmu_hdr));
	printf("Compressing data\n");
	if(compress(buf2 + sizeof(dzzt_vmu_hdr), &destLen, buf1, sourceLen) != Z_OK) {
		printf("Compression error!\n");
		free(buf2);
		free(buf1);
		return;
	} else {
		printf("Compressed to %i bytes\n",destLen);
		free(buf1);
	}
	strcpy(pkg.desc_short, shortname);
	strcpy(pkg.desc_long, longname);
	strcpy(pkg.app_id, "DZZT3");
	pkg.icon_cnt = 1;
	pkg.icon_anim_speed = 1;
	memcpy(&pkg.icon_pal[0],icon_data,32);
	pkg.icon_data=icon_data+32;
	pkg.eyecatch_type = VMUPKG_EC_NONE;
	pkg.data_len = destLen + sizeof(dzzt_vmu_hdr);
	pkg.data=buf2;
	printf("Building package\n");
	vmu_pkg_build(&pkg, &pkg_out, &pkg_size);

	printf("Opening output file: %s\n", filename_out);
	fs_unlink(filename_out);
	fd=fs_open(filename_out,O_WRONLY);
	if(fd==-1) {
		printf("Error opening output file.\n");
		return;
	}
	printf("Writing..\n");
	fs_write(fd,pkg_out,pkg_size);
	printf("Closing output file\n");
	fs_close(fd);
	free(buf2);
	printf("VMUification complete\n");
}
